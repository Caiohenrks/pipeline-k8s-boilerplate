pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: ci-cd-toolkit
                image: caiohenrks/ci-cd-toolkit
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }

    environment {
        DOCKER_IMAGE = "caiohenrks/python-crud"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DEPLOYMENT_FILE = "kubernetes/deployment.yaml"
        GIT_REPO = "https://github.com/Caiohenrks/pipeline-k8s-boilerplate.git"
        GIT_BRANCH = "master"
        KUBERNETES_DEPLOYMENT = "python-crud-deployment"
        KUBERNETES_NAMESPACE = "default"
    }
    stages {
        stage('Code Quality Analysis') {
            steps {

                script {
                    withCredentials([string(credentialsId: 'SONARQUBE', variable: 'SONARQUBE')]) {
                        sh """
                            docker run \
                            --rm \
                            -e SONAR_HOST_URL="https://sonarcloud.io/" \
                            -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${JOB_NAME} -Dsonar.organization=\"caiohenrks\" -Dsonar.languages=python -Dsonar.projectVersion=V${BUILD_NUMBER}" \
                            -e SONAR_TOKEN="${SONARQUBE}" \
                            -v "." \
                            sonarsource/sonar-scanner-cli
                        """
                        sleep 15
                        
                        def qualityGate = sh(script: "curl -k -u ${SONARQUBE}: https://sonarcloud.io/api/qualitygates/project_status?projectKey=${JOB_NAME}", returnStdout: true).trim()
                        echo "Quality Gate JSON: ${qualityGate}"
                        
                        def status = new groovy.json.JsonSlurper().parseText(qualityGate).projectStatus.status
                        echo "SonarQube Quality Gate Status: ${status}"
                        
                        if (status != 'OK') {
                            error "Qualidade do código não atingiu o nível esperado: ${status}"
                        }
                    }
                }
            }
        }

    
        stage('Build Docker Image') {
            steps {

                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        stage('Security Image Scan') {
            steps {
                sh 'curl -L -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl'
                sh """
                trivy image --exit-code 0 --severity HIGH,CRITICAL \
                --format template --template @html.tpl \
                --output trivy-report.html ${JOB_NAME.toLowerCase()}
                """
            }
        }
        
        stage('Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        docker.withRegistry('', 'dockerhub-credentials') {
                            docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        }
                    }
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                container('docker') {
                    script {
                        sh """
                        sed -i "s|image: .*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|" ${DEPLOYMENT_FILE}
                        """
                    }
                }
            }
        }

        stage('Commit and Push Changes') {
            steps {
                container('docker') {
                    script {
                        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                            sh """
                            git config --global --add safe.directory /home/jenkins/agent/workspace/PIPELINE-NGINX
                            git config --global user.email "jenkins@example.com"
                            git config --global user.name "Jenkins"
                            git checkout ${GIT_BRANCH}
                            git add ${DEPLOYMENT_FILE}
                            git commit -m "Update deployment image to ${DOCKER_IMAGE}:${DOCKER_TAG}"
                            git push https://${GITHUB_TOKEN}@github.com/Caiohenrks/pipeline-k8s-boilerplate.git ${GIT_BRANCH}
                            """
                        }
                    }
                }
            }
        }
    }

}
