pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: sonar-scanner
                image: sonarsource/sonar-scanner-cli
                command:
                - cat
                tty: true
              - name: docker-build
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              - name: trivy
                image: aquasec/trivy:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: workspace
                  mountPath: /workspace
              - name: newman
                image: postman/newman_alpine33
                command:
                - cat
                tty: true
                volumeMounts:
                - name: workspace
                  mountPath: /workspace
              - name: git
                image: alpine/git:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: workspace
                  mountPath: /workspace
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
              - name: workspace
                emptyDir: {}
            """
        }
    }
    environment {
        DOCKER_IMAGE = "caiohenrks/python-crud"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DEPLOYMENT_FILE = "kubernetes/deployment.yaml"
        GIT_REPO = "https://github.com/Caiohenrks/pipeline-k8s-boilerplate.git"
        GIT_BRANCH = "master"
        KUBERNETES_DEPLOYMENT = "python-crud-deployment"
        KUBERNETES_NAMESPACE = "default"
        ARTIFACTS_DIR = "artifacts"
    }
    stages {
        stage('Code Quality Analysis') {
            steps {
                container('sonar-scanner') {
                    script {
                        withCredentials([string(credentialsId: 'SONARQUBE', variable: 'SONARQUBE')]) {
                            sh """
                                sonar-scanner \
                                -Dsonar.projectKey=${JOB_NAME} \
                                -Dsonar.organization=caiohenrks \
                                -Dsonar.projectVersion=V${BUILD_NUMBER} \
                                -Dsonar.host.url=https://sonarcloud.io/ \
                                -Dsonar.login=${SONARQUBE}
                            """
                            sleep 15
                            def qualityGate = sh(script: "curl -k -u ${SONARQUBE}: https://sonarcloud.io/api/qualitygates/project_status?projectKey=${JOB_NAME}", returnStdout: true).trim()
                            echo "Quality Gate JSON: ${qualityGate}"
                            def status = new groovy.json.JsonSlurper().parseText(qualityGate).projectStatus.status
                            if (status != 'OK') {
                                error "Qualidade do código não atingiu o nível esperado: ${status}"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker-build') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Security Image Scan') {
            steps {
                container('trivy') {
                    script {
                        sh "apk add curl -y"
                        sh 'curl -L -o /workspace/html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl'
                        sh """
                        trivy image --exit-code 0 --severity HIGH,CRITICAL \
                        --format template --template @/workspace/html.tpl \
                        --output /workspace/trivy-report.html ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container('docker-build') {
                    script {
                        docker.withRegistry('', 'dockerhub-credentials') {
                            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        }
                    }
                }
            }
        }

        stage('Smoke Test') {
            steps {
                container('newman') {
                    script {
                        sh """
                        newman run /workspace/postman/${JOB_NAME.toLowerCase()}.json \
                            -r htmlextra \
                            --reporter-htmlextra-export /workspace/newman-report.html
                        """
                    }
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                container('docker-build') {
                    script {
                        sh "sed -i \"s|image: .*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|\" ${DEPLOYMENT_FILE}"
                    }
                }
            }
        }

        stage('Commit and Push Changes') {
            steps {
                container('git') {
                    script {
                        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                            sh """
                            git config --global --add safe.directory /home/jenkins/agent/workspace/${JOB_NAME}
                            git config --global user.email \"jenkins@example.com\"
                            git config --global user.name \"Jenkins\"
                            git checkout ${GIT_BRANCH}
                            git add ${DEPLOYMENT_FILE}
                            git commit -m \"Update deployment image to ${DOCKER_IMAGE}:${DOCKER_TAG}\"
                            git push https://${GITHUB_TOKEN}@github.com/Caiohenrks/pipeline-k8s-boilerplate.git ${GIT_BRANCH}
                            """
                        }
                    }
                }
            }
        }

        stage('Collect and Archive Evidence') {
            steps {
                container('docker-build') {
                    script {
                        sh """
                        mkdir -p ${ARTIFACTS_DIR}
                        mv /workspace/trivy-report.html ${ARTIFACTS_DIR}/
                        mv /workspace/newman-report.html ${ARTIFACTS_DIR}/
                        """
                        archiveArtifacts artifacts: "${ARTIFACTS_DIR}/*", fingerprint: true
                    }
                }
            }
        }
    }
}
